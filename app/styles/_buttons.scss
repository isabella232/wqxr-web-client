@import "nypr-ui/buttons";

/**
* stacked button group
* the idea is to create a module that wraps buttons and botton like objects
* so that they can be stacked vertically, aligned center, and the container
* object is as wide as the widest child.
* It's this last bit which is tough to do strictly in CSS, but it does seem
* to work when the .btn-group--stacked is a flex-child itself.
*/
.btn-group--stacked {
  display: flex;
  flex-direction: column;

  > .btn {
    margin-right: 0;
    margin-bottom: 10px; // should update with global _var
    text-align: center;

    &:last-child {
      margin-bottom: 0;
    }
  }

  > .dropdown > .btn {
    width: 100%;
  }
}

.btn--studio360-override {
  font-weight: 600 !important;
  max-width: 120px;

  > a {
    margin-top: 10px !important;
    font-family: "Open Sans", sans-serif !important;
    color: white !important;
    line-height: initial !important;
  }
}

/***
* Buttons:
*/

/**
 * Button:
 * `.btn`
 * A base for all buttons. Not much to look at.
 *
 *      @example
 *      button.btn Click Me
 */
.btn {
  @include btn;
}

/**
* Heavy Button:
* `.btn--heavy`
* Make the button bold.
*
*      @example
*      button.btn.btn--heavy Something to Emphasize
*/
.btn--heavy {
  font-weight: 600;
}

.btn--heavyborder {
  border-width: 2px;
}

/**
* Blank Button:
* `.btn--blank`
* An empty button. Useful for icons or interactive buttons
* to be style other ways
*
*      @example
*      button.btn.btn--blank I'm a button but I look like nothing special
*/
.btn--blank {
  @include blank-button;
}

/**
 * Large Button:
 * `.btn--large`
 * It's a little bigger than your standard button.
 *
 *      @example
 *      button.btn.btn--large Click Me, I'm Bigger!
 */
.btn--large {
  @include btn--large;
}


/**
* Medium Button:
* `.btn--medium`
* It's a little mediumer than your standard button.
*
*      @example
*      button.btn.btn--medium Just Right.
*/
.btn--medium {
  padding: 0px 16px;
  line-height: 50px;
}

/**
* Small Button:
* `.btn--small`
* It's a little smaller than your standard button.
*
*      @example
*      button.btn.btn--small Can you see me? I'm small.
*/
.btn--small {
  padding: 0 5px;
  line-height: 20px;
}

/**
 * Circle Button:
 * `.btn--circle`
 * Good for icons.
 *
 *      @example
 *      button.btn.btn--circle
 *          i.fa.fa-twitter
 */
.btn--circle {
  @include btn--circle;
}

/**
 * Fat Button:
 * `.btn--fat`
 * When that small circle button is an important call to action.
 *
 *      @example
 *      button.btn.btn--circle.btn--fat
 *          i.fa.fa-twitter
 */
.btn--fat {
  @include btn--fat;
}

/**
* Squared Off Button:
* `.btn--squared`
* Squared off button with rounded corners.
*
*      @example
*      button.btn.btn--squared Submit
*/
.btn--squared {
  border-radius: 6px;
  padding: 0 8px;
}

/**
* Strict Square Button:
* `.btn--strictsquare`
* No rounded corners whatsoever.
*
*      @example
*      button.btn.btn--strictsquare Enter
*/
.btn--strictsquare {
  border-radius: 0;
}

/**
* Square Button:
* `.btn--square-small`
* A 45px width and height button.
*
*      @example
*      button.btn.btn--strictsquare.btn--square-small Hi
*/
.btn--square-small {
  width: 45px;
  height: 45px;
}

.btn--white {
  @include btn--white;
}

.btn--whitetext {
  color: white;
}


/**
* Pink Button:
* `.btn--pink`
* Make your button stand out with a pink background
*
*      @example
*      button.btn.btn--pink You Know You Want to Click
*/
.btn--pink {
  background-color: $pink;
  border-color: $pink;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
        color: white;
    }
  }
}

/**
* Button with Pink Text:
* `.btn--pinktext`
* A regular button but the text is pink.
*
*      @example
*      button.btn.btn--pinktext Click Here
*/
.btn--pinktext {
  color: $pink;
}

/**
 * Blue Button:
 * `.btn--blue`
 *
 *      @example
 *      button.btn.btn--blue Click
 */
.btn--blue {
  @include btn--solid-color(
    $background-color: $wqxrblue,
    $hover-color: $wqxrdarkblue
  )
}

/**
* Button with Blue Text:
* `.btn--bluetext`
* A regular button but the text is blue.
*
*      @example
*      button.btn.btn--bluetext Click Here
*/
.btn--bluetext {
  color: $wqxrlink;
}

/**
* Green Button:
* `.btn--green`
*
*      @example
*      button.btn.btn--green Click
*/
.btn--green {
  background-color: $lightgreen;
  border-color: $lightgreen;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
      background-color: $darkgreen;
      border-color: $darkgreen;
      color: white;
    }
  }
}

/**
* Black Button:
* `.btn--black`
*
*      @example
*      button.btn.btn--black Click Here
*/
.btn--black {
  color: white;
  background-color: black;
  border-color: black;

  &:not([disabled]) {
    &:hover,
    &:focus {
      background-color: $pink;
      border-color: $pink;
      color: white;
    }
  }
}

/**
* Button with Black Text:
* `.btn--blacktext`
*
*      @example
*      button.btn.btn--blacktext Submit Comment
*/
.btn--blacktext {
  color: $darkergray;

  &:not([disabled]) {
    &:hover,
    &:focus {
      color: $pink;
    }

    &.active {
      color: black;
    }
  }
}

/**
* Red Button:
* `.btn--red`
* Make your button stand out with a red background
*
*      @example
*      button.btn.btn--red You Know You Want to Click
*/
.btn--red {
  background-color: $red;
  border-color: $red;
  color: white;

  &:not([disabled]) {
    &:hover {
      color: white;
    }
  }
}


@mixin btn--red {
  background-color: $red;
  border-color: $red;
  color: white;

  &:hover,
  &:focus {
    outline: none;
    background-color: $darkred;
    border-color: $darkred;
    color: white;
    opacity: 1;
  }
}


/**
* Media Query Buttons:
* Sometimes we need to change a button's colors based on the current MQ.
* These should be created according to special MQ cases.
*/

/**
* `.btn--mq-graywhite`
* Gray/White MQ Button
*
*      @example
*      button.btn.btn--mq-graywhite Gray at Narrow. White at wide.
*/
.btn--mq-graywhite {
  @include mq($medium-and-up) {
    color: white;
    border-color: rgba(white, 0.2);

    &:hover,
    &:focus {
      color: white;
      border-color: rgba(white, 0.7);
    }
  }
}

/**
* Button Link:
* `.btn--link`
* If you have you a button that should look
* like a regular link, use this modifier
*
*      @example
*      button.btn.btn--link Show Comments
*/
.btn--link {
  color: #333;
  background-color: transparent;
  border-radius: 0;
  border: none;
  border-bottom: 1px solid rgba(204,204,204,0.8);
  padding: 0;
  font-weight: normal;
  @include fontsize($base-font);
  line-height: #{$line-height}px;

  &:hover,
  &:focus {
    color: $wqxrlink;
    background-color: transparent;
    border-color: $wqxrlink;
  }
}

/**
* Button Link with Icon:
* If you've got a button that should look like a link,
* and you want to include an icon, you can add `.btn--linkicon`
* to the `<button>`, and wrap the link text in a span.
*
* Also include `.btn--icon` for proper spacing after the icon.
*
*      @example
*      button.btn.btn--icon.btn--link.btn--linkicon
*          i.fa.fa-comment
*          span 2 Comments
*/
.btn--linkicon {
  border: none;

  > span {
    border-bottom: 1px solid rgba(204,204,204,0.8);
  }

  // beta maybe later button
  &.btn--white {
    > span {
      border-color: rgba(white, 0);
      color: white;
    }

    &:hover,
    &:focus {
      > span {
        color: white;
        border-color: rgba(white, 1);
      }
    }

    &:active {
      opacity: 0.60;
    }

    transition: opacity 125ms ease, border-color 125ms ease;
  }
}

/**
* Button Group:
* Group some buttons together and they will line up nicely
*
*      @example
*      .btn-group
*          button.btn.btn--large Listen
*          button.btn Queue
*          button.btn.btn--circle
*              i.fa.fa-ellipsis-h
*/
.btn-group {
  font-size: 0;

  > * {
    margin-right: 10px;
    vertical-align: middle;
    display: inline-block;
  }

  > :last-child {
    margin-right: 0;
  }
}

.btn-group--withvr {

  > * {
    @extend %vertical-rhythm;

    @include mq($medium-and-up) {
      margin-bottom: 0;
    }
  }
}

.btn-group--closer {
  > * {
    margin-right: 7px;
  }
}

// bump specificity to override
// .flag-body>:last-child setting
// margin-bottom to 0
.btn-group.btn-group--storytease {
  margin-bottom: -1.5rem;
  > * {
    margin-bottom: 1.5rem;
  }
}

.btn-group--storyheader {
  @include mq($medium-and-up) {
    margin-bottom: -1.5rem;
    > * {
      margin-bottom: 1.5rem;
    }
  }
}

/**
* Toggle Button:
* `.btn--toggle > .btn-togglecontent`
* When a button has content you want to want to toggle on clicks, use these
* classes. They can applied directly to buttons used for other purposes
* such as accordions or tabs and will not interrupt functionality.
*
* The important thing is to add a data-state attribute set to either `first` or
* `second`. This corresponds to which child will be displayed by default.
*
* Requires `js/wqxr-web-client/main.js` but should probably split into its own mod.
*
*      @example
*      button.btn.btn--toggle.js-toggleButton(data-state="first")
*          .btn-togglecontent Toggle State 1
*          .btn-togglecontent Toggle State 2
*/
.btn--toggle {
  position: relative;
  // override base `.btn` transition so there is no
  // conflict with the btn-togglecontent transitions
  //@include transition(none);
}

.btn-togglecontent {
  transition: all 150ms ease;

  &:first-child {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
}

.btn--block {
  display: block;
  padding: 8px;
  width: 100%;
}

.btn--smalltext {
  @include btn--smalltext;
}

.btn--bigtext {
  @include fontsize(20);
}

.btn--upper {
  text-transform: uppercase;
}

.btn--strongtext {
  @include btn--strongtext;
}

.thickbtn {
  @include thickbtn;
}


@mixin blue-btn-jshover {
  @include js-hover(
    $props:  (background-color, border-color),
    $base:   ($wqxrblue, $wqxrblue),
    $hover:  ($wqxrdarkblue, $wqxrdarkblue)
  );
}

.callout-button {
  @include btn;
  @include btn--large;
  @include btn--strongtext;
  @include thickbtn;
  @include btn--white;
  white-space: nowrap;
  height: 46px;
}

.listen-button.blue-hollow {
  @include gray-hollow-svg($wqxrblue);

  &:hover .listen-ui,
  &:focus .listen-ui {
    @include gray-hollow-svg-hover($wqxrblue);
  }
}

.listen-button.blue-boss,
.listen-button.blue-minion {
  @include btn--blue;
  @include blue-btn-jshover;
}

.listen-button.blue-circle {
  @include btn--blue;
}
